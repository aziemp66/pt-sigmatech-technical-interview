// Code generated by MockGen. DO NOT EDIT.
// Source: util/jwt/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/jwt/type.go -destination=mock/util/jwt_mock.go -typed=true
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	util_jwt "customer-service/util/jwt"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GenerateAuthToken mocks base method.
func (m *MockJWTManager) GenerateAuthToken(ID, name string, role util_jwt.ROLE, duration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthToken", ID, name, role, duration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthToken indicates an expected call of GenerateAuthToken.
func (mr *MockJWTManagerMockRecorder) GenerateAuthToken(ID, name, role, duration any) *MockJWTManagerGenerateAuthTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthToken", reflect.TypeOf((*MockJWTManager)(nil).GenerateAuthToken), ID, name, role, duration)
	return &MockJWTManagerGenerateAuthTokenCall{Call: call}
}

// MockJWTManagerGenerateAuthTokenCall wrap *gomock.Call
type MockJWTManagerGenerateAuthTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJWTManagerGenerateAuthTokenCall) Return(arg0 string, arg1 error) *MockJWTManagerGenerateAuthTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJWTManagerGenerateAuthTokenCall) Do(f func(string, string, util_jwt.ROLE, time.Duration) (string, error)) *MockJWTManagerGenerateAuthTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJWTManagerGenerateAuthTokenCall) DoAndReturn(f func(string, string, util_jwt.ROLE, time.Duration) (string, error)) *MockJWTManagerGenerateAuthTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VerifyAuthToken mocks base method.
func (m *MockJWTManager) VerifyAuthToken(tokenString string) (*util_jwt.AuthClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthToken", tokenString)
	ret0, _ := ret[0].(*util_jwt.AuthClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthToken indicates an expected call of VerifyAuthToken.
func (mr *MockJWTManagerMockRecorder) VerifyAuthToken(tokenString any) *MockJWTManagerVerifyAuthTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthToken", reflect.TypeOf((*MockJWTManager)(nil).VerifyAuthToken), tokenString)
	return &MockJWTManagerVerifyAuthTokenCall{Call: call}
}

// MockJWTManagerVerifyAuthTokenCall wrap *gomock.Call
type MockJWTManagerVerifyAuthTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJWTManagerVerifyAuthTokenCall) Return(claims *util_jwt.AuthClaims, err error) *MockJWTManagerVerifyAuthTokenCall {
	c.Call = c.Call.Return(claims, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJWTManagerVerifyAuthTokenCall) Do(f func(string) (*util_jwt.AuthClaims, error)) *MockJWTManagerVerifyAuthTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJWTManagerVerifyAuthTokenCall) DoAndReturn(f func(string) (*util_jwt.AuthClaims, error)) *MockJWTManagerVerifyAuthTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
