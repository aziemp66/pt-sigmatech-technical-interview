// Code generated by MockGen. DO NOT EDIT.
// Source: util/mail/type.go
//
// Generated by this command:
//
//	mockgen -package=mock_util -source=util/mail/type.go -destination=mock/util/mail_mock.go -typed=true
//

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailManager is a mock of MailManager interface.
type MockMailManager struct {
	ctrl     *gomock.Controller
	recorder *MockMailManagerMockRecorder
}

// MockMailManagerMockRecorder is the mock recorder for MockMailManager.
type MockMailManagerMockRecorder struct {
	mock *MockMailManager
}

// NewMockMailManager creates a new mock instance.
func NewMockMailManager(ctrl *gomock.Controller) *MockMailManager {
	mock := &MockMailManager{ctrl: ctrl}
	mock.recorder = &MockMailManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailManager) EXPECT() *MockMailManagerMockRecorder {
	return m.recorder
}

// SentResetPassword mocks base method.
func (m *MockMailManager) SentResetPassword(token, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentResetPassword", token, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentResetPassword indicates an expected call of SentResetPassword.
func (mr *MockMailManagerMockRecorder) SentResetPassword(token, email any) *MockMailManagerSentResetPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentResetPassword", reflect.TypeOf((*MockMailManager)(nil).SentResetPassword), token, email)
	return &MockMailManagerSentResetPasswordCall{Call: call}
}

// MockMailManagerSentResetPasswordCall wrap *gomock.Call
type MockMailManagerSentResetPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMailManagerSentResetPasswordCall) Return(arg0 error) *MockMailManagerSentResetPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMailManagerSentResetPasswordCall) Do(f func(string, string) error) *MockMailManagerSentResetPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMailManagerSentResetPasswordCall) DoAndReturn(f func(string, string) error) *MockMailManagerSentResetPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SentVerifyEmail mocks base method.
func (m *MockMailManager) SentVerifyEmail(token, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SentVerifyEmail", token, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SentVerifyEmail indicates an expected call of SentVerifyEmail.
func (mr *MockMailManagerMockRecorder) SentVerifyEmail(token, email any) *MockMailManagerSentVerifyEmailCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SentVerifyEmail", reflect.TypeOf((*MockMailManager)(nil).SentVerifyEmail), token, email)
	return &MockMailManagerSentVerifyEmailCall{Call: call}
}

// MockMailManagerSentVerifyEmailCall wrap *gomock.Call
type MockMailManagerSentVerifyEmailCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMailManagerSentVerifyEmailCall) Return(arg0 error) *MockMailManagerSentVerifyEmailCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMailManagerSentVerifyEmailCall) Do(f func(string, string) error) *MockMailManagerSentVerifyEmailCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMailManagerSentVerifyEmailCall) DoAndReturn(f func(string, string) error) *MockMailManagerSentVerifyEmailCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
